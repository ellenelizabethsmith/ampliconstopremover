}
}
print(paste0("N clean: ",length(cleaned_fasta)))
print(paste0("N with stop: ",length(bad_fasta)))
print(paste0("Total checked: ",length(cleaned_fasta) + length(bad_fasta)))
#if(write){
#  writeLines(cleaned_fasta, paste0(fileoutprefix,"_cleaned.fasta"))
#  writeLines(bad_fasta,paste0(fileoutprefix,"_has_stop.fasta"))
#}
return(list(cleaned_fasta,bad_fasta))
}
out <- search_sequences(fasta_file = fasta_file ,start_lhs = 2,trim_rhs = 1,fileoutprefix="test",write=FALSE)
res <- search_sequences(fasta_file = fasta_file ,start_lhs = 2,trim_rhs = 1,fileoutprefix="test",write=FALSE)
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
assign("maxclean",length(res[[1]]),envir = globalenv())
assign("bestres",res,envir = globalenv())
#maxclean <- length(res[[1]])
bestres <- res
}
})
pickbest <- function(fasta_file){
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
assign("maxclean",length(res[[1]]),envir = globalenv())
assign("bestres",res,envir = globalenv())
#maxclean <- length(res[[1]])
bestres <- res
}
})
return(bestres)
}
pickbest(fasta_file = fasta_file)
pickbest <- function(fasta_file){
maxclean <- -1
bestres <- c()
apply(combos,1,function(combo){
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
assign("maxclean",length(res[[1]]),envir = globalenv())
assign("bestres",res,envir = globalenv())
#maxclean <- length(res[[1]])
bestres <- res
}
})
return(bestres)
}
pickbest(fasta_file = fasta_file)
maxclean <- -1
bestres <- c()
pickbest(fasta_file = fasta_file)
length(res[[1]])
maxclean <- -1
bestres <- c()
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
assign("maxclean",length(res[[1]]),envir = globalenv())
assign("bestres",res,envir = globalenv())
#maxclean <- length(res[[1]])
bestres <- res
}
assign("maxclean",length(res[[1]]),envir = globalenv())
assign("maxclean",2,envir = globalenv())
l <- length(res[[1]])
length(res[[1]])
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
l <- length(res[[1]])
assign("maxclean",2,envir = globalenv())
assign("bestres",res,envir = globalenv())
#maxclean <- length(res[[1]])
bestres <- res
}
l <- length(res[1])
res[1]
length(res[1])
integer(length(res[1]))
as.integer(length(res[1]))
length(res[2])
length(res[[2]])
length(res[[1]])
integer(length(res[[1]]))
res
length(res)
length(res[1])
length(res[[1]])
length(res[[2]])
l <- length(res[[1]])
l
l + 2
results <- apply(combos,1,function(combo){
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
results
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
print(combo)
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
maxclean <- length(res[[1]])
bestres <- res
}
}
pickbest <- function(fasta_file){
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
maxclean <- length(res[[1]])
bestres <- res
}
}
return(bestres)
}
pickbest(fasta_file = fasta_file)
bestres <- pickbest(fasta_file = fasta_file)
failout <- paste0(fileoutprefix,"_fail.fasta")
write_fastas <- function(result, fileoutprefix = "ASVs", write=TRUE){
cleanout <- paste0(fileoutprefix,"_pass.fasta")
failout <- paste0(fileoutprefix,"_fail.fasta")
print("Writing new files.")
print(paste0("Writing ", cleanout))
writeLines(result[[1]],cleanout)
print(paste0("Writing ", failout))
writeLines(result[[2]],failout)
}
write_fastas <- function(result, fileoutprefix = "ASVs", write=TRUE){
cleanout <- paste0(fileoutprefix,"_pass.fasta")
failout <- paste0(fileoutprefix,"_fail.fasta")
print("Writing new files.")
print(paste0("Writing ", cleanout))
#writeLines(result[[1]],cleanout)
print(paste0("Writing ", failout))
#writeLines(result[[2]],failout)
}
write_fastas <- function(result, fileoutprefix = "ASVs", write=TRUE){
cleanout <- paste0(fileoutprefix,"_pass.fasta")
failout <- paste0(fileoutprefix,"_fail.fasta")
print("Writing new files.")
print(paste0("Writing ", cleanout))
#writeLines(result[[1]],cleanout)
print(paste0("Writing ", failout))
#writeLines(result[[2]],failout)
}
write_fastas(bestres,fileoutprefix = "AOB")
setwd("~/0_Analysis/2024_ASV_cleaner")
write_fastas <- function(result, fileoutprefix = "ASVs", write=TRUE){
cleanout <- paste0(fileoutprefix,"_pass.fasta")
failout <- paste0(fileoutprefix,"_fail.fasta")
print("Writing new files.")
print(paste0("Writing ", cleanout))
writeLines(result[[1]],cleanout)
print(paste0("Writing ", failout))
writeLines(result[[2]],failout)
}
bestres <- pickbest(fasta_file = fasta_file)
write_fastas(bestres,fileoutprefix = "AOB")
bestres
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
maxclean <- length(res[[1]])
bestres <- res
}
}
pickbest <- function(fasta_file){
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
return(bestres)
}
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[1]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
return(bestres)
pickbest <- function(fasta_file){
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
return(bestres)
}
bestres <- pickbest(fasta_file = fasta_file)
write_fastas(bestres,fileoutprefix = "AOB")
fasta_file <- read.fasta("//uoa/global/CLSM/School of Biological Sciences/Teams/GubryRangin Group/Ellen Smith/02_Projects/2024_Jasmeet_Rice/DADA2_Outputs/AOA/dada2/ASV_seqs.fasta")
has_stop <- function(seq){
translated <- translate(str_split(seq,"")[[1]],frame = 1)
return("*" %in% translated)
}
# Function to check for stop codons
check_stop_codons <- function(seq, start_lhs, trim_rhs) {
seq <- substring(seq,(0+start_lhs),(nchar(seq)-trim_rhs))
if(grepl("nnnnnnnnnn",seq)){ # contains Ns
#get LHS
lhs <- str_split(seq,"nnnnnnnnnn")[[1]][1]
lhs <- substring(lhs,1,(nchar(lhs) -nchar(lhs) %% 3)) # make it a multiple of 3
#get rhs
rhs <- str_split(seq,"nnnnnnnnnn")[[1]][2]
rhs <- substring(rhs,(1+nchar(rhs) %% 3),nchar(rhs)) #make multiple of 3
return (has_stop(rhs) || has_stop(lhs))
}else{
return(has_stop(seq))
}
}
search_sequences <- function(fasta_file,start_lhs,trim_rhs){
# Process each sequence in the fasta file
sequences_with_stop <- c()
cleaned_fasta <- ""
bad_fasta <- ""
badindex <- c()
for (i in 1:length(fasta_file)) {
# Extract sequence and name
seq <- paste(as.character(fasta_file[[i]]),collapse = "")
name <- names(fasta_file)[i]
# Check for stop codons
has_stop_codon <- check_stop_codons(seq,start_lhs,trim_rhs)
# If stop codon is found, add to list
if (has_stop_codon) {
sequences_with_stop <- c(sequences_with_stop, name)
bad_fasta <- c(bad_fasta, paste0(">",name, "\n",seq))
badindex <- c(badindex,i)
} else {
# If no stop codon, add to cleaned fasta
cleaned_fasta <- c(cleaned_fasta, paste0(">",name, "\n",seq))
}
}
print(paste0("N clean: ",length(cleaned_fasta)))
print(paste0("N with stop: ",length(bad_fasta)))
print(paste0("Total checked: ",length(cleaned_fasta) + length(bad_fasta)))
return(list(cleaned_fasta,bad_fasta))
}
pickbest <- function(fasta_file){
combos <- expand.grid(c(1,2,3),c(1,2,3))
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
for(res in results){
#check if this combination has more clean seqs than the current
if(length(res[[1]]) > maxclean){
print("This one is better!")
print(length(res[[1]]))
maxclean <- length(res[[1]])
bestres <- res
}
}
return(bestres)
}
write_fastas <- function(result, fileoutprefix = "ASVs", write=TRUE){
cleanout <- paste0(fileoutprefix,"_pass.fasta")
failout <- paste0(fileoutprefix,"_fail.fasta")
print("Writing new files.")
print(paste0("Writing ", cleanout))
writeLines(result[[1]],cleanout)
print(paste0("Writing ", failout))
writeLines(result[[2]],failout)
}
remove_stop_codons <- function(fasta, fileoutprefix){
bestres <- pickbest(fasta_file = fasta)
write_fastas(bestres,fileoutprefix = fileoutprefix)
}
remove_stop_codons(fasta = fasta_file,fileoutprefix = "AOB")
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
results
combos <- expand.grid(c(1,2,3),c(1,2,3))
maxclean <- -1
bestres <- c()
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
names(results)
combos
names <- apply(combos,1,function(combo) {paste(combo["Var1"],combo["Var2"],sep = "_")})
names
names <- apply(combos,1,function(combo) {paste0("Forward trim: ",combo["Var1"],". Reverse trim: ",combo["Var2"])})
names
combos <- expand.grid(c(1,2,3),c(1,2,3))
names <- apply(combos,1,function(combo) {paste0("Forward trim: ",combo["Var1"],". Reverse trim: ",combo["Var2"])})
names(combos) <- names
maxclean <- -1
bestres <- c()
print("Checking all reading frame combinations...")
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
bestcombo <- ""
for(name in names(results)){
nclean <- length(res[[1]])
#check if this combination has more clean seqs than the current
if(nclean > maxclean){
maxclean <- length(res[[1]])
bestres <- res
bestcombo <- name
}
}
for(name in names(results)){
res <- results[[name]]
nclean <- length(res[[1]])
#check if this combination has more clean seqs than the current
if(nclean > maxclean){
maxclean <- length(res[[1]])
bestres <- res
bestcombo <- name
}
}
res
results
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
names(results) <- names
for(name in names(results)){
res <- results[[name]]
nclean <- length(res[[1]])
#check if this combination has more clean seqs than the current
if(nclean > maxclean){
maxclean <- length(res[[1]])
bestres <- res
bestcombo <- name
}
}
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
combos <- expand.grid(c(1,2,3),c(1,2,3))
names <- apply(combos,1,function(combo) {paste0("Forward trim: ",combo["Var1"],". Reverse trim: ",combo["Var2"])})
names(combos) <- names
maxclean <- -1
combos <- expand.grid(c(1,2,3),c(1,2,3))
names <- apply(combos,1,function(combo) {paste0("Forward trim: ",combo["Var1"],". Reverse trim: ",combo["Var2"])})
combos
combos <- expand.grid(c(1,2,3),c(1,2,3))
names <- apply(combos,1,function(combo) {paste0("Forward trim: ",combo["Var1"],". Reverse trim: ",combo["Var2"])})
maxclean <- -1
bestres <- c()
bestcombo <- ""
print("Checking all reading frame combinations...")
results <- apply(combos,1,function(combo){
start_lhs <- combo["Var1"]
trim_rhs <- combo["Var2"]
res <- search_sequences(fasta_file,start_lhs,trim_rhs)
})
print("...done.")
names(results) <- names
print("Selecting best reading frame...")
for(name in names(results)){
res <- results[[name]]
nclean <- length(res[[1]])
#check if this combination has more clean seqs than the current
if(nclean > maxclean){
maxclean <- length(res[[1]])
bestres <- res
bestcombo <- name
}
}
print("...done.")
print(bestcombo)
print(paste0("Sequences without stop codon: ",length(bestres[[1]])))
print(paste0("Sequences with stop codon: ",length(bestres[[2]])))
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
fasta_file <- read.fasta("//uoa/global/CLSM/School of Biological Sciences/Teams/GubryRangin Group/Ellen Smith/02_Projects/2024_Jasmeet_Rice/asvcleaner_outs/Cleaning_AOB/cleaned/cleaned.seqs.fasta")
remove_stop_codons(fasta = fasta_file,fileoutprefix = "AOB")
remove_stop_codons(fasta = fasta_file,fileoutprefix = "AOA")
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
fasta_file <- read.fasta("//uoa/global/CLSM/School of Biological Sciences/Teams/GubryRangin Group/Ellen Smith/02_Projects/2024_Jasmeet_Rice/DADA2_Outputs/AOA/dada2/ASV_seqs.fasta")
remove_stop_codons(fasta = fasta_file,fileoutprefix = "AOA")
devtools::create("amplicon_stop_codon_remover")
devtools::create("ampliconstopremover")
?read.fasta
?translate
?substring
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
source("~/0_Analysis/2024_ASV_cleaner/amplicon_stop_codon_remover.R", echo=TRUE)
setwd("~/0_Analysis/2024_ASV_cleaner/ampliconstopremover/R")
?read.fasta
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::load_all()
library("ampliconstopremover")
git remote add origin git@github.com:ellenelizabethsmith/ampliconstopremover.git
library(devtools)
git remote add origin git@github.com:ellenelizabethsmith/ampliconstopremover.git
#' remove_stop_codons
#'
#' @param fasta Input file in fasta format
#' @param fileoutprefix The base name to be used in the output files
#'
#' @return None, writes FASTA files with and without stop codons.
#' @export
#'
remove_stop_codons <- function(fasta, fileoutprefix){
bestres <- pickbest(fasta_file = fasta)
write_fastas(bestres,fileoutprefix = fileoutprefix)
}
